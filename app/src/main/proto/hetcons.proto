// ################################################################

// Hetcons

// ################################################################

// Hetcons version 1.
// Because Protobuf does not support mutual depenency, I temporarily put hetcons code here.


syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.isaacsheff.charlotte.proto";
option java_outer_classname = "CharlotteProto";
option objc_class_prefix = "CHARLOTTE";

package charlotte;


import "common.proto";

// Utils
message HetconsTime {
  int64 val = 1;
}

message HetconsValue {
  oneof proposedContent_oneof {
    charlotte.Reference block = 1;
    int64 num = 2;
  }
}

enum HetconsProposalType {
  BlockSlot = 0;
}

message HetconsBallot {
    oneof ballot_onefo {
        int64 ballotNumber = 1;
        string ballotSequence = 2;
    }
}

// Proposal for the next slot provided by clients.
message HetconsProposal {
  HetconsTime time = 1;
  HetconsBallot ballot = 2;
  HetconsValue value = 3;
  HetconsProposalType proposalType = 4;
  repeated IntegrityAttestation.ChainSlot slots = 5;
  charlotte.Hash hash_of_ballot_number_and_time = 6;
  int64 timeout = 7;
}


message HetconsObserverQuorum {

  message Spec {
    string base = 1;
    int32 size = 2;
  }

  charlotte.CryptoId owner = 1;
  repeated charlotte.CryptoId members = 2;
  repeated Spec specs = 3;
  string name = 4;
  bool main = 5;
}

message HetconsObserver {
  charlotte.CryptoId id = 1;
  repeated HetconsObserverQuorum quorums = 2;
}

// the group of observers that the message to be sent.
message HetconsObserverGroup {
  repeated HetconsObserver observers = 1;
  repeated string roots = 2;
}


// Main Messages
enum HetconsMessageType {
  M1a = 0;
  M1b = 1;
  M2b = 2;
  PROPOSAL = 3;
  OBSERVERGROUP = 4;
}

message HetconsBlock {
  HetconsMessage hetcons_message = 1;
  charlotte.Signature sig = 2;
}

message HetconsMessage {
  HetconsMessageType type = 4;
  oneof hetconsMessageType_oneof {
    HetconsMessage1a m1a = 1;
    HetconsMessage1b m1b = 2;
    HetconsMessage2ab m2b = 3;
    HetconsObserverGroup observerGroup = 5;
  }
  Reference observerGroupReferecne = 10;
  charlotte.CryptoId identity = 8;
}

//message HetconsMessage {
//  HetconsMessageType type = 4;
//  oneof hetconsMessageType_oneof {
//    HetconsMessage1a m1a = 1;
//    HetconsMessage1b m1b = 2;
//    HetconsMessage2ab m2b = 3;
//    HetconsObserverGroup observerGroup = 5;
//  }
//  Reference observerGroupReferecne = 10;
//  charlotte.Signature sig = 7;
//  charlotte.CryptoId identity = 8;
//}

// Leader Propose the new value with a new bollot number
message HetconsMessage1a {
  HetconsProposal proposal = 1;
}

// Acceptors reply to the leader with (Proposal for bollet b, and previous accepted proposal which is a 2a message
message HetconsMessage1b {
  charlotte.Reference m1a_ref = 1;
  HetconsMessage2ab m2a = 2;

}

// 2a and 2b messages have the same format. The difference is that the sig in 2a should be the host server itself.
message HetconsMessage2ab {
  charlotte.Reference m1a_ref = 1;
  HetconsQuorumRefs quorum_of_1bs = 2;
}

// references of a quorum of 1bs or 2bs.
message HetconsQuorumRefs {
  repeated charlotte.Reference block_hashes = 1;
}


// Status

enum HetconsConsensusStage {
  Proposed = 0;
  M1ASent = 1;
  M1BSent = 2;
  QuorumOfM1BReceived = 3;
  M2BSent = 4;
  QuorumOfM2BReceived = 5;
  HetconsTimeout = 6;
  InvalidProposal = 7;
  ConsensusDecided = 8;
  ConsensusAccepted = 9;
  ConsensusFailed = 10;
  ConsensusIdile = 11;
  ConsensusRestart = 12;
}

message HetconsStageStatus {
  message ResponseInfo {
    string status_explaination = 1;
  }
  HetconsConsensusStage stage = 1;
  ResponseInfo info = 2;
}