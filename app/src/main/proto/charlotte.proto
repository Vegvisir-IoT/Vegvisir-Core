syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.isaacsheff.charlotte.proto";
option java_outer_classname = "CharlotteProto";
option objc_class_prefix = "CHARLOTTE";

package charlotte;

import "google/protobuf/timestamp.proto";
// To use Any: import "google/protobuf/any.proto";
// To use Empty: import "google/protobuf/empty.proto";

import "common.proto";
import "hetcons.proto";


// BASIC CRYPTO PRIMITIVES

// message Hash {
//   oneof hashalgorithm_oneof {
//     bytes sha3 = 1;
//   }
// }

// message PublicKey {
//   message EllipticCurveP256 { // I suppose we may someday want to edit how we store P256s?
//     bytes byteString = 1;
//   }
//   oneof keyalgorithm_oneof {    
//     EllipticCurveP256 ellipticCurveP256 = 1;
//   }
// }

// message CryptoId { // distinct from PublicKeys, because it might be a hash of a public key, I guess
//   oneof idtype_oneof {
//     PublicKey publicKey = 1;
//     Hash hash = 2;
//   }
// }

// message Signature {
//   message SignatureAlgorithmSHA256WithECDSA {
//     bytes byteString = 1;
//   }
//   CryptoId cryptoId = 1;
//   oneof signaturealgorithm_oneof {
//     SignatureAlgorithmSHA256WithECDSA sha256WithEcdsa = 2;
//   }
// }


// // BLOCKS

// message Reference {
//   Hash hash = 1; // the block we're referencing
//   repeated Hash availabilityAttestations = 2; // ids of avail. attestations (where to find it)
//   repeated Reference integrityAttestations = 3; // ids of relevant integrity attestations (and where to find those)
// }

// message IntegrityAttestation {
//   message ChainSlot {
//     Reference block = 1;
//     Reference root = 2;
//     uint64 slot = 3;
//     Reference parent = 4;
//   }
//   message SignedChainSlot { // I really wish I could make Signed a generic
//     ChainSlot chainSlot = 1;
//     Signature signature = 2;
//   }
//   message TimestampedReferences {
//     google.protobuf.Timestamp timestamp = 1;
//     repeated Reference block = 2;
//   }
//   message SignedTimestampedReferences {
//     TimestampedReferences timestampedReferences = 1;
//     Signature signature = 2;
//   }
//   message GitSimBranch {
//     google.protobuf.Timestamp timestamp = 1;
//     string branchName = 2;
//     Reference commit = 3;
//   }
//   message SignedGitSimBranch {
//     GitSimBranch gitSimBranch = 1;
//     Signature signature = 2;
//   }
//   message HetconsAttestation {
//     repeated CryptoId observers = 1;
//     repeated Reference message2b = 2;
//   }
//   oneof integrityattestationtype_oneof {
//     SignedChainSlot signedChainSlot = 1;
//     SignedTimestampedReferences signedTimestampedReferences = 2;
//     SignedGitSimBranch signedGitSimBranch = 3;
//     HetconsAttestation hetconsAttestation = 4;
//   }
// }

// message AvailabilityAttestation {
//   message StoreForever {
//     repeated Reference block = 1;
//   }
//   message SignedStoreForever { // I really wish I could make Signed a generic
//     StoreForever storeForever = 1;
//     Signature signature = 2;
//   }
//   oneof availabilityattestationtype_oneof {
//     SignedStoreForever signedStoreForever = 1;
//   }
// }

message SignedGitSimCommit {
  message GitSimCommit {
    message GitSimParents {
      message GitSimParent {
        Reference parentCommit = 1;
        bytes diff = 2;
      }
      repeated GitSimParent parent = 1;
    }
    string comment = 1;
    Hash hash = 2;
    oneof commit_oneof {
      bytes initialCommit = 3;
      GitSimParents parents = 4;
    }
  }
  GitSimCommit commit = 1;
  Signature signature = 2;
}

message Block {
  oneof blocktype_oneof {
    AvailabilityAttestation availabilityAttestation = 1;
    IntegrityAttestation integrityAttestation = 2;
    string str = 3; // why not?
    HetconsBlock hetconsBlock = 4;
    SignedGitSimCommit signedGitSimCommit= 5;
    // This is probably the best place for an Any type, but for now, keep it minimum
  }
}


// SERVICES


message SendBlocksInput {
  Block block = 1;
}
message SendBlocksResponse {
  string errorMessage = 1;
}

service CharlotteNode {
  // send blocks to this server.
  // used for gossiping / flooding
  rpc SendBlocks(stream SendBlocksInput) returns (stream SendBlocksResponse) {}
}


// WILBUR

message AvailabilityPolicy {
  oneof availabilitypolicytype_oneof {
    AvailabilityAttestation fillInTheBlank = 1;
  }
}
// just wrappers for the rpc input and output
message RequestAvailabilityAttestationInput {
  AvailabilityPolicy policy = 1;
}
message RequestAvailabilityAttestationResponse {
  string errorMessage = 1;
  Reference reference = 2;
}
service Wilbur { // anything running a Wilbur service should also run a CharlotteNode
  rpc RequestAvailabilityAttestation(RequestAvailabilityAttestationInput) returns (RequestAvailabilityAttestationResponse) {}
}

// WILBUR QUERY

message WilburQueryInput {
  oneof wilburquery_oneof {
    Reference reference = 1;
    Block fillInTheBlank = 2;
  }
}

message WilburQueryResponse {
  string errorMessage = 1;
  repeated Block block = 2;
}

service WilburQuery { // anything running a WilburQuery service should also run a Wilbur and CharlotteNode service
  rpc WilburQuery(WilburQueryInput) returns (WilburQueryResponse) {}
}



// FERN

message IntegrityPolicy {
  message HetconsPolicy {
    HetconsMessage proposal = 1;
    CryptoId observer = 2;
  }
  oneof integritypolicytype_oneof {
    IntegrityAttestation fillInTheBlank = 1;
    HetconsPolicy hetconsPolicy = 2;
  }
}
// just wrappers for the RPC input and output
message RequestIntegrityAttestationInput {
  IntegrityPolicy policy = 1;
}
message RequestIntegrityAttestationResponse {
  string errorMessage = 1;
  Reference reference = 2;
}
service Fern { // anything running a Fern service should also run a CharlotteNode
  rpc RequestIntegrityAttestation(RequestIntegrityAttestationInput) returns (RequestIntegrityAttestationResponse) {}
}







